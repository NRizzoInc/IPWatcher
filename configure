#!/bin/bash

# check OS
[[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && isWindows=true || isWindows=false

# if linux, need to check if using correct permissions
if [[ "${isWindows}" = false ]]; then
    if [ "$EUID" -ne 0 ]; then
        echo "Please run as root ('sudo')"
        exit
    else
        configDir=/etc/sysconfig
        configFilePath=${configDir}/IPWatcherEnviron
        # if dir & file do not exist, add them before trying to scan & create backup
        mkdir -p ${configDir}
        touch -a ${configFilePath}
    fi
fi

rootDir="$(readlink -fm $0/..)"

# CLI Flags
print_flags () {
    echo "=========================================================================================================="
    echo "Usage: ./configure"
    echo "=========================================================================================================="
    echo "Helper utility to setup the bash command to run as a callback if the public IP changes"
    echo "=========================================================================================================="
    echo "How to use:" 
    echo "  To set the callback for IP changes: ./configure --callback <command to run>"
    echo "  To start the callback (done automatically when setting callback):  ./configure --start"
    echo "  To stop callback:  ./configure --stop"
    echo "  To print current callback command: ./configure --current"
    echo "=========================================================================================================="
    echo "Available Flags (mutually exclusive):"
    echo "  --callback '<cmd>': Set the callback command to run when the public IP changes (automatically turns on callback) -- use quotes"
    echo "  --stop: Turn off the callback"
    echo "  --start: Turn on the callback"
    echo "  --current: Print the current callback command"
    echo "  --help: Prints this message"
    echo "=========================================================================================================="
}

# Functions

startCallback () {
    sed -i '/isCallbackOn=/d' ${configFilePath}
    echo "isCallbackOn=true" >> ${configFilePath}
    echo "Configured IPWatcher to trigger the set callback"
}

stopCallback () {
    sed -i '/isCallbackOn=/d' ${configFilePath}
    echo "isCallbackOn=false" >> ${configFilePath}
    echo "Configured IPWatcher to NOT trigger the set callback"
}


# $1 = the callback's command
setCallback () {
    # create backup & save new version with updated path
    cmd="$1"
    sed -i.bak '/IPChangeCallback=/d' ${configFilePath}
    echo "IPChangeCallback=\"${cmd}\"" >> ${configFilePath}
    echo "callback: ${cmd}"
    startCallback
}

getCurrentCallback () {
    callback=$(sed 's/^IPChangeCallback=//' ${configFilePath})
    echo "${callback}"
}

# parse command line args
# print flags if none passed
numArgs=$#
[[ ${numArgs} -eq 0 ]] && print_flags && exit 1
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --callback )
            setCallback "$2" # $2 is the command in quotes
            exit 0
            ;;

        --start )
            startCallback
            exit 0
            ;;

        --stop )
            stopCallback
            exit 0
            ;;
            
        --current )
            currCallback=$(getCurrentCallback)
            echo "Current callback command: ${currCallback}"
            exit 0
            ;;

        -h | --help )
            print_flags
            exit 0
            ;;
        * )
            echo "... Unrecognized command"
            print_flags
            exit 1
            ;;
    esac
    shift
done
